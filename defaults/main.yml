---
# Channel of Telegraf to install
telegraf_install_version: stable

# The user and group telegraf should run under (should be set to telegraf unless needed otherwise)
telegraf_runas_user: telegraf
telegraf_runas_group: telegraf

# Configuration Template
telegraf_configuration_template: telegraf.conf.j2

# Configuration Variables
telegraf_tags:
telegraf_aws_tags: false
telegraf_aws_tags_prefix:

telegraf_agent_interval: 1s
telegraf_round_interval: "true"
telegraf_metric_batch_size: "1000"
telegraf_metric_buffer_limit: "10000"

telegraf_collection_jitter: 0s
telegraf_flush_interval: 10s
telegraf_flush_jitter: 0s
telegraf_debug: "false"
telegraf_quiet: "false"
telegraf_hostname:
telegraf_omit_hostname: "false"

# These can be defined for package installation from a specfic location
# e.g.: TimescaleDB Telegraf Package with Postgresql/TimescaleDB Outputs added
# telegraf_rpm_pkg_url: https://telegrafreleases.blob.core.windows.net/linux/telegraf-1.13.0~with~pg-1.x86_64.rpm
# telegraf_deb_pkg_url: https://telegrafreleases.blob.core.windows.net/linux/telegraf_1.13.0~with~pg-1_amd64.deb

# defaults related to influxdb output plugin
telegraf_influxdb_default_url: http://localhost:8086
telegraf_influxdb_additional_urls: []

telegraf_influxdb_urls: "[ '{{ telegraf_influxdb_default_url }}' ] + {{ telegraf_influxdb_additional_urls }}"

telegraf_influxdb_database: telegraf
telegraf_influxdb_precision: s
telegraf_influxdb_retention_policy: autogen
telegraf_influxdb_write_consistency: any
telegraf_influxdb_ssl_ca:
telegraf_influxdb_ssl_cert:
telegraf_influxdb_ssl_key:
telegraf_influxdb_insecure_skip_verify:
telegraf_influxdb_timeout: 30s
telegraf_influxdb_username:
telegraf_influxdb_password:
telegraf_influxdb_user_agent:
telegraf_influxdb_udp_payload:

# Defaults related to timescaledb output plugin
telegraf_timescale_host: "localhost"
telegraf_timescale_user: "postgres"
telegraf_timescale_password: "pgsecret"
telegraf_timescale_sslmode: "disable"
telegraf_timescale_dbname: "timescale"
telegraf_timescale_schema: "public"
telegraf_timescale_table_template: "CREATE TABLE IF NOT EXISTS {TABLE}({COLUMNS}); SELECT create_hypertable({TABLELITERAL},'time',chunk_time_interval := '24 hours'::interval,if_not_exists := true);"
telegraf_timescale_tags_as_foreignkeys: "false"
telegraf_timescale_tags_as_jsonb: "false"
telegraf_timescale_fields_as_jsonb: "false"
telegraf_timescale_connection: "host={{ telegraf_timescale_host|default('localhost') }} user={{ telegraf_timescale_user|default('postgres') }} password={{ telegraf_timescale_password|default('pgsecret') }} sslmode={{ telegraf_timescale_sslmode|default('disable') }} dbname={{ telegraf_timescale_dbname|default('timescale') }}"
#telegraf_timescale_connection: "postgres://{{ telegraf_timescale_user|default('postgres') }}:{{ telegraf_timescale_password|default('pgsecret') }}@{{ telegraf_timescale_host|default('localhost') }}/{{ telegraf_timescale_dbname|default('timescale') }}?sslmode={{ telegraf_timescale_sslmode|default('disable') }}"


telegraf_output_plugins:

# Uncomment for invluxdb v2+ output
#  - name: influxdb_v2
#    options:
#      urls: "{{ telegraf_influxdb_urls }}"
#      token: "{{ influxdbv2_token }}"
#      organization: home.prettybaked.com
#      bucket: "telegraf"
#      bucket_tag: "telegraf"
#      exclude_bucket_tag: false
#      timeout: "5s"
#      http_headers: '{"X-Special-Header" = "Special-Value"}'
#      user_agent: "telegraf"
#      content_encoding: "gzip"
#      influx_uint_support: false
  - name: influxdb
    options:
      urls: "{{ telegraf_influxdb_urls }}"
      database: "{{ telegraf_influxdb_database }}"
      precision: "{{ telegraf_influxdb_precision }}"
      write_consistency: "{{ telegraf_influxdb_write_consistency }}"
      timeout: "{{ telegraf_influxdb_timeout }}"
#      username: "{{ telegraf_influxdb_username }}"
#      password: "{{ telegraf_influxdb_password }}"
#      user_agent: "{{ telegraf_influxdb_user_agent }}"
#      udp_payload: "{{ telegraf_influxdb_udp_payload }}"
#      ssl_ca: "{{ telegraf_influxdb_ssl_ca }}"
#      ssl_cert: "{{ telegraf_influxdb_ssl_cert }}"
#      ssl_key: "{{ telegraf_influxdb_ssl_key }}"
#      insecure_skip_verify: "{{ telegraf_influxdb_insecure_skip_verify }}"

# uncomment for postgresql/timescaledb output

#  - name: postgresql
#    options:
#      connection: "{{ telegraf_timescale_connection }}"
#      tags_as_foreignkeys: "{{ telegraf_timescale_tags_as_foreignkeys }}"
#      table_template: "{{ telegraf_timescale_table_template }}"
#      schema: "{{ telegraf_timescale_schema }}"
#      tags_as_jsonb: "{{ telegraf_timescale_tags_as_jsonb }}"
#      fields_as_jsonb: "{{ telegraf_timescale_fields_as_jsonb }}"



telegraf_plugins_base:
  - name: mem
  - name: system
  - name: cpu
    options:
      percpu: "true"
      totalcpu: "true"
      fielddrop:
        - "time_*"
  - name: disk
    options:
      ignore_fs:
        - tmpfs
        - devfs
        - devtmpfs
        - overlay
        - iso9660
        - ceph
  - name: swap
  - name: processes
  - name: diskio
    options:
      skip_serial_number: "true"
  - name: kernel
  - name: kernel_vmstat
  - name: net
  - name: nstat
    options:
      dump_zeros: "true"
  - name: netstat
  - name: ethtool
  - name: internal
  - name: swap
  - name: sysstat
    options:
      interval: "30s"
      sadc_path: "/usr/lib/sysstat/sadc"
      activities:
        - "DISK"
        - "SNMP"
        - "INT"
      group: "true"
      options:
        -C: "cpu"
        -B: "paging"
        -b: "io"
        -d: "disk"
        -H: "hugepages"
        -I ALL: "interrupts"
        -n ALL: "network"
        -P ALL: "per_cpu"
        -q: "queue"
        -r ALL: "mem_util"
        -S: "swap_util"
        -u: "cpu_util"
        -v: "inode"
        -W: "swap"
        -w: "task"


telegraf_plugins: "{{ telegraf_plugins_base  +  telegraf_plugins_extra | default([]) }}"

telegraf_influxdata_base_url: "https://repos.influxdata.com"

# enable snmp collection
telegraf_enable_snmp: true

snmp_pkgs:
  - snmp
  - libsnmp-base
  - snmp-mibs-downloader


metrics_pkgs:
  - sysstat
  - dstat
  - ifstat
  - lm-sensors
  - smartmontools
  - htop
  - ipmitool

# Example Grok Patterns for use with logparser input
# Works with default nginx 'main' log and 'fail2ban.log' configured by ansible-nginx role.
nginx_accesslog_grokpattern: '%{CLIENT:client_ip} - %{NOTSPACE:ident} \[%{HTTPDATE:ts:ts-httpd}\] %{NOTSPACE:request_host:tag} "(?:%{WORD:verb:tag} %{NOTSPACE:request} (?:HTTP/%{NUMBER:http_version:float})?|%{DATA})" %{NUMBER:resp_code:tag} (?:%{NUMBER:resp_bytes:int}|-) "%{NOTSPACE:referrer}" "%{DATA:agent:tag}" (?:%{NUMBER:request_time}|-) (?:%{NUMBER:upstream_connect_time}|-) %{NOTSPACE:x_forwarded_for} %{NOTSPACE:upstream_cache_status:tag}'
fail2ban_banlog_grokpattern: '%{TIMESTAMP_ISO8601:timestamp} %{WORD:log_src}.%{WORD:src_action} *\[%{INT:fail2ban_digit}\]: %{WORD:loglevel:tag} *\[%{NOTSPACE:service:tag}\] %{GREEDYDATA:ban_status:tag} %{IP:clientip:tag}'
