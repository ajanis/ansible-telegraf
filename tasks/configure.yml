---


  # - name: Collect additional input requirements
  #   tags:
  #     - telegraf-inputs
  #   block:

      # - name: Check for GPU presence
      #   ansible.builtin.command:
      #     cmd: 'nvidia-smi -L'
      #   register: nvidia_presence
      #   changed_when: no
      #   failed_when: no

      # - name: Check for Docker presence
      #   ansible.builtin.command:
      #     cmd: 'docker -v'
      #   register: docker_presence
      #   changed_when: no
      #   failed_when: no

      # - name: Check for Proxmox presence
      #   ansible.builtin.command:
      #     cmd: 'pveversion'
      #   register: pve_presence
      #   changed_when: no
      #   failed_when: no

      # - name: "Proxmox Configurations"
      #   block:

          # - name: Create Proxmox authentication file for Prometheus PVE exporter
          #   ansible.builtin.copy:
          #     dest: /etc/prometheus/pve.yml
          #     content: |
          #       default:
          #         user: root@pam
          #         password: '{{ vault_proxmox_root_password }}'
          #         verify_ssl: false
          #     owner: prometheus
          #     group: prometheus
          #     mode: 0600

      #     - name: "Set 'has_proxmox' fact"
      #       ansible.builtin.set_fact:
      #         has_proxmox: true

      #   when:
      #     - "'pve-manager' in pve_presence.stdout"

      # - name: "GPU Configurations"
      #   block:

      #     - name: "Print GPU info"
      #       ansible.builtin.debug:
      #         msg: "{{ nvidia_presence.stdout }}"

          # - name: "Install GPU Exporter Package"
          #   ansible.builtin.apt:
          #     deb: https://github.com/utkuozdemir/nvidia_gpu_exporter/releases/download/v1.1.0/nvidia-gpu-exporter_1.1.0_linux_amd64.deb
          #     state: present

          # - name: "Enable GPU Exporter service"
          #   ansible.builtin.service:
          #     name: nvidia_gpu_exporter
          #     state: started
          #     enabled: yes

        #   - name: "Set 'has_gpu' fact"
        #     ansible.builtin.set_fact:
        #       has_gpu: true

        # when:
        #   - "'GPU' in nvidia_presence.stdout"

      # - name: "Enable JellyFin Job for prometheus"
      #   block:

      #     - name: Print Jellyfin metrics endpoint info
      #       ansible.builtin.debug:
      #         msg: "Port {{ item.port }}: {{ item.name }}"
      #       when:
      #         - item.name == 'jellyfin'
      #         - item.port == 8096
      #       loop: "{{ ansible_facts.tcp_listen }}"

      #     - name: "Set 'has_jellyfin' fact"
      #       ansible.builtin.set_fact:
      #         has_jellyfin: true
      #   when:
      #     - "'jellyfin' in ansible_facts.tcp_listen|map(attribute='name')"

      # - name: "Docker Configurations"
      #   block:

      #     - name: "Print Docker info"
      #       ansible.builtin.debug:
      #         msg: "{{ docker_presence.stdout }}"

      #     - name: "Set 'has_docker' fact"
      #       ansible.builtin.set_fact:
      #         has_docker: true

      #     - name: Check for existing docker daemon config
      #       ansible.builtin.stat:
      #         path: /etc/docker/daemon.json
      #       register: docker_daemon_json

      #     - debug:
      #         var: docker_daemon_json
      #         verbosity: 1

      #     - name: Slurp JSON from file
      #       ansible.builtin.slurp:
      #         src: /etc/docker/daemon.json
      #       register: docker_daemon_configfile
      #       when:
      #         - docker_daemon_json.stat.exists

      #     - debug:
      #         var: docker_daemon_configfile.content|b64decode
      #         verbosity: 1
      #       when:
      #         - docker_daemon_json.stat.exists

      #     - name: Set empty array for docker daemon config
      #       set_fact:
      #         docker_daemon_config: {}

      #     - name: Set daemon config to existing file content if found
      #       set_fact:
      #         docker_daemon_config: "{{docker_daemon_configfile.content|b64decode}}"
      #       when:
      #         - docker_daemon_json.stat.exists

      #     - debug:
      #         var: docker_daemon_config|to_nice_json
      #         verbosity: 1

      #     - name: Add 
      #       set_fact:
      #         docker_daemon_config: "{{ docker_daemon_config | combine({ 'experimental': true, 'metrics-addr': '0.0.0.0:9323' },recursive=true) }}"
      #       when: "'metrics-addr' not in docker_daemon_config|default({})"

      #     - debug:
      #         var: docker_daemon_config|to_nice_json
      #         verbosity: 1

      #     - name: Add Nvidia runtime to docker daemon config
      #       set_fact:
      #         docker_daemon_config: "{{ docker_daemon_config|combine({ 'runtimes': {'nvidia': { 'path': '/usr/bin/nvidia-container-runtime', 'runtimeArgs': [] } } },recursive=true) }}"
      #       when: "'nvidia' not in docker_daemon_config.runtimes|default({})"

      #     - debug:
      #         var: docker_daemon_config|to_nice_json
      #         verbosity: 1

      #     - name: Write modified Docker daemon json
      #       copy:
      #         content: "{{ docker_daemon_config | to_nice_json }}"
      #         dest: /etc/docker/daemon.json
      #       register: docker_daemon_updated

      #     - name: Restart docker service
      #       service:
      #         name: docker
      #         state: restarted
      #       when: docker_daemon_updated

      #   when:
          # - "'version' in docker_presence.stdout"


      # - name: "Ensure /etc/prometheus directory exists"
      #   ansible.builtin.file:
      #     dest: /etc/prometheus
      #     state: directory
      #     mode: 0755

      # - name: "Add Prometheus configuration from template"
      #   ansible.builtin.template:
      #     src: prometheus.yml.j2
      #     dest: /etc/prometheus/prometheus.yml
      #     mode: 0644
      #   notify: restart_prometheus_services

      # - name: "Flush Handlers"
      #   ansible.builtin.meta: flush_handlers


- name: "Set templatized Telegraf configuration"
  template:
    src: "{{ telegraf_configuration_template }}"
    dest: "{{ telegraf_configuration_dir }}/telegraf.conf"
    force: yes
    backup: no
    owner: telegraf
    group: telegraf
    mode: 0744
  when: telegraf_template_configuration
  notify:
    - restart telegraf

- name: Test for sysvinit script
  stat:
    path: /etc/init.d/telegraf
  register: telegraf_sysvinit_script

- name: Modify user Telegraf should run as [sysvinit]
  command: sed -i s/USER=.*/USER={{ telegraf_runas_user }}/ /etc/init.d/telegraf
  when: telegraf_runas_user != "telegraf" and telegraf_sysvinit_script.stat.exists

- name: Modify group Telegraf should run as [sysvinit]
  command: sed -i s/GROUP=.*/GROUP={{ telegraf_runas_group }}/ /etc/init.d/telegraf
  when: telegraf_runas_group != "telegraf" and telegraf_sysvinit_script.stat.exists

- name: Create systemd service directory [systemd]
  file:
    path: /etc/systemd/system/telegraf.service.d
    state: directory
  when: telegraf_runas_user != "telegraf" and not telegraf_sysvinit_script.stat.exists

- name: Modify user Telegraf should run as [systemd]
  template:
    src: systemd/system/telegraf.service.d/override.conf
    dest: /etc/systemd/system/telegraf.service.d/override.conf
  when: telegraf_runas_user != "telegraf" and not telegraf_sysvinit_script.stat.exists
  register: telegraf_unit_file_updated

- name: Reload systemd configuration [systemd]
  command: systemctl daemon-reload
  when: telegraf_unit_file_updated is defined and telegraf_unit_file_updated.changed
